#!groovy
@Library("shared-library") _
def POD_LABEL = "agent-${env.JOB_NAME}-${env.BUILD_NUMBER}"
podTemplate(label: POD_LABEL,  yaml: libraryResource('com/ci-task/podTemplates/agent-ci-cd.yaml'))
        {
          node(POD_LABEL) {
            stage('Git checkout') {
              container('gradle') {
                checkout([$class: 'GitSCM', branches: [[name: '*/draft']], userRemoteConfigs: [[credentialsId: 'github-private',\
                  url: 'https://github.com/orelbriga/hello-world.git']]])
              }
            }
            stage('Gradle: Test & Build') {
              container('gradle') {
                log.info "compiling code + running  tests + building jar: "
                sh """chmod +x ./gradlew
                ./gradlew jib -DTAG=$BUILD_NUMBER """
                // log.info "saving jar as an artifact:"
                // archiveArtifacts artifacts: 'build/libs/hello-world-0.0.1-SNAPSHOT.jar', onlyIfSuccessful: true
              }
            }
            stage('Build docker image & push to registry') {
              container('docker') {
                env.REGISTRY = "docker.io"
                env.IMAGE_NAME = "hello-world-app"
                env.REGISTRY_USER = "orelbriga"
                env.REPOSITORY = REGISTRY_USER+"/"+IMAGE_NAME
                env.TAG = "${env.BUILD_NUMBER}"
                // script {
                //   log.info "building docker image:"
                //   imageStage.build()
                //   log.info "pushing image to registry - ${env.REGISTRY}"
                //   imageStage.push()
                //   }
                }
              }
            stage('Deploy app to k8s') {
              container('docker') {
                log.info "deploy the app to the k8s cluster using yaml files - with kube-config as an authenticator: "
                kubernetesDeploy(configs: 'config.yaml', kubeconfigId: 'k8sconfig')
              }
            }
            stage('Deployment Tests') {
              container('docker') {
                script {
                  withKubeConfig([credentialsId: 'secret-jenkins']) {
                    log.info "installing kubectl on the container to check the application's pod state + logs:"
                    deployVars.downloadKubectl(version:"1.24.1")
                    sleep 5

                    def APP_POD_NAME = deployVars.appName()
                    def POD_STATE = deployVars.podState()
//                    def CLUSTER_HOST_IP = deployVars.clusterHostIP()
//                    def NODE_PORT = deployVars.nodePort()

                    deployVars.getRequest()
                    sleep 3

                    deployVars.getAppLogs()
                    archiveArtifacts artifacts: 'hello-world-app-*.log'

                    if (POD_STATE != "Running") {
                      error("Application pod $APP_POD_NAME is not healthy, check app log")
                    }
                    else {
                      log.info "Application pod $APP_POD_NAME is in $POD_STATE state!"
                    }
                  }
                }
              }
            }
            stage('Terminate app & Image cleanup') {
              container('docker') {
                withKubeConfig([credentialsId: 'secret-jenkins']) {
                  log.info "Deployment tests passed successfully - Terminating the app: "
                  deployCleanup.terminateApp()
                  sleep 3
                  log.info "Delete unused app image: "
                  deployCleanup.deleteImage()
                }
              }
            }
          }
        }